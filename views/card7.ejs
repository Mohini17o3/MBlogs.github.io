<%- include('partials/header.ejs') %>

<div class="outer">

<div class="descriptionCard1">  
    <h3>Privilege</h3>
    <h4>July 16, 2024</h4>
    <p>
        It literally feels like a writing a diary now, to some extent. The difference being I maintain boundaries here of not pouring out all my thoughts, at least not directly, hehehe. I just resumed reading a book I have been stuck with since last year, yup that's the level of procrastination (❤️ => or maybe there are so many other things, other stresses that I can't take out time for it) (🧠 => excuse).
    </p>
    <p>
        The book is <i>Range</i> by <i>David Epstein</i>, one of the two self-help books I have, the other one is <i>How to Win Friends and Influence People</i> by <i>Dale Carnegie</i>. The latter one had instructions on how to make the most out of reading that book. Those instructions asked me to make notes and mark important areas if you are not reading just for fun. So I left that book. No offense, I did not want to disrespect the instructions mentioned 😓. Really, I have to complete <i>Range</i> first, then this one, and then buy a new one.
    </p>
    <p>
        Anyway, so about <i>Range</i>. I read about a now well-known famous person, who tried out art but failed, who left school, became an art salesman and failed at it, resumed studies but couldn't keep up, became a school teacher and soon failed there, and even became a pastor and failed there too. Finally, he returned back to art, brought a new, his own form of expression through art, died young and became more famous after his death. One of his paintings sold for over $100 million. That person was Van Gogh.

        It felt good to read about him. That made me think about this "privilege" of trying out different things. It was definitely easier in the past. Now, everything is too competitive. I feel like those who have the privilege of trying different things are either the ones "who have everything and nothing to lose," or "those who have nothing and therefore nothing to lose."
    </p>
    <p>
        Then there are the middle ones, stuck in between. They have not too much, but not too little, so they gotta maintain things, becoming mediocre. They're the majority in the rat race, trying to follow that one unique person, and ending up becoming the most general one. I don't think anyone reading this right now can relate to this or can understand what I'm trying to say, but if you get it? 🙌 Buddy, hang in there, you'll find your way too.
    </p>
    <p>
        There are days, like today, that I feel the need to have that privilege of leaving the worries and trying out everything that fascinates me. Or maybe I am forced to follow the rat race, stay mediocre, and then one day I will earn that privilege myself?? Let's see. Till then I just need to hang in there, I guess, just keep trying :/
    </p>
    <p>
        k byee
    </p>
</div>

</div>
<section id="comments">
    <h2>Comments</h2>
    <ul id="comments-list">
        
    </ul>

    <div id="commentDiv">
        <form id="comment-form" method="POST">
            <textarea name="content" placeholder="Add a comment"></textarea>
            <button type="submit">Submit</button>
        </form>
    </div>
</section>

<%- include("partials/footer.ejs") %>


<script>
  
  document.addEventListener('DOMContentLoaded', async () => {
    console.log("comment doc loaded ");
    const commentsList = document.getElementById('comments-list');
    const commentForm = document.getElementById('comment-form');
    const postId = '<%= post.numerical_id %>';  // Post ID
    const token = localStorage.getItem('token');
    let loading  = false ; 
    let currentUser = null ;
 
    async function fetchLoggedUser(){
        if(!token) {
            return ;
        } 

        try {
            const res = await fetch('/auth/user' , {
                headers : {
                    "Authorization" : `Bearer ${token}`, 
                }
            }) ;
            if(res.ok) {
                const data =  await res.json()  ;
                currentUser = data.user ; 
            }

        }catch(e) {
            console.log(e) ; 
        }

        loadComments();  

    }


      
     async function loadComments () {
        loading = true; 
        commentsList.innerHTML = `<p>Loading comments...</p>`; 

        try {
            const res = await fetch(`/comments/${postId}`) ;
            const {comments} = await res.json() ; 

            loading = false; 
            commentsList.innerHTML = "" ;

             
            comments.forEach((comment) => {
                const li = document.createElement('li') ;
                li.innerHTML = `
                <p> ${comment.content}</p>
                <small>by ${comment.user.name} on ${new Date (comment.createdAt).toDateString()}</small>
                 ${currentUser && currentUser.id === comment.user.id ? `
               <div class = "commentButtonOuter"><button class = "delete-btn" data-id = "${comment.id}" >Delete</button> <button class="edit-btn" data-id ="${comment.id}"> Edit </button> </div>  ` : ""
                 
                 }           
                 `  ; 
             commentsList.appendChild(li) ;

             // event listeners
            document.querySelectorAll('.delete-btn').forEach(button => {
                button.addEventListener("click" , () => deleteComment(button.dataset.id)) ;
            }); 

            document.querySelectorAll('.edit-btn').forEach(button => {
                 button.addEventListener("click" , () => editComment(button.dataset.id) ) ;
            })
                
            })  ;



        } catch(e) {
            console.log('Error loading comments:', e);

        }
         
    }

    // Add comment
    commentForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const confirmation = window.confirm("Sure to post ? ") ;
        if(!confirmation) {
            return ; 
        }
        const content = commentForm.querySelector('textarea[name="content"]').value;

        if (!token) {
            alert('Please log in to comment.');
            return;
        }

          const tempComment = document.createElement("li") ;
           tempComment.innerHTML = `<p>${content}</p>
                                      <small>Posting ....</small>   `;
            commentsList.prepend(tempComment) ;                          
        try {
           const res =  await fetch(`/comments${postId}/comments`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ content })
            });

            if(res.ok) {
                const { comment } = await res.json();

               tempComment.innerHTML = `
                <p>${comment.content}</p>
                <small>by ${comment.user.name} on ${new Date(comment.createdAt).toDateString()}</small>
            `;

            commentForm.reset();
            loadComments() ;
            } else {
                tempComment.innerHTML = `<p>Error adding comment. Please try again.</p>`;
            }
           
        } catch (error) {
            console.error('Error adding comment:', error);
            tempComment.innerHTML = `<p>Error adding comment. Please try after again later.</p>`;
        }
    });


   //  edit comment 

   async function editComment(commentId) {

      if(!token) {
        alert('Please log in to edit comments.');
            return;
      }

      const commentElement = document.querySelector(`[data-id ="${commentId}"]`).closest("li");
      const commentText = commentElement.querySelector("p").innerText;
      const newContent = prompt("Edit your comment:", commentText);


      if (!newContent || newContent.trim() === "") {
        alert("Comment cannot be empty.");
        return;
    }

    try {
        const res = await fetch(`/comments${postId}/${commentId}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ content: newContent })
        });

        if (res.ok) {
            loadComments(); 
        } else {
            alert("Error editing comment. Please try again.");
        }

    } catch (e) {
        console.error("Error editing comment:", e);
    }
}


   
 

    // Delete comment
    async function deleteComment(commentId) {
        if (!token) {
            alert('Please log in to delete comments.');
            return;
        }

        const confirmation = window.confirm("Are you sure you want to delete?");
        if (!confirmation) return;


         const deletionButton = document.querySelector(`.delete-btn[data-id = "${commentId}"]`);

     if (deletionButton) {
            deletionButton.innerText = "Deleting...";
            deletionButton.disabled = true;
        }
        
        try {
            await fetch(`/comments${postId}/${commentId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            loadComments();
        } catch (error) {
            console.error('Error deleting comment:', error);
            commentsList.innerHTML = `<p>Error deleting comment. Please try again.</p>`;
        }
    }
    await fetchLoggedUser(); 
    loadComments();



});
</script>