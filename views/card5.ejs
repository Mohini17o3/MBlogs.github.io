<%-include('partials/header.ejs') %>

<div class="outer">

   <div class="descriptionCard1">  
     <h3>Denial</h3>
    <h4>June 16 , 2024</h4>
<p>
   A while ago , one of my friends asked me a question , we were just casually talking , actually playing this game called truth and dare , its a little stupid game atleast for me ,I would never do a dare and the questions that are asked I doubt I would ever answer truthfully ðŸ’€, no offence though , anyways , she asked a really good question - "what's your biggest regret uptill now ?" this question really hit me , at that moment I could just say that it has never been only one thing that I have regretted about , such an unsatisfied soul I am , but to be honest there is , there is one thing that I deeply regret about , something that made me hate myself , something that still troubles my mind to think about .

</p>
The regret that I have is about not letting go of the past , its about me being stubborn to prove something that was practically not feasible , I still regret it as to why I did that , holding on to that one thing ruined so many opportunities and possibilities of betterment , but I could just not let go , even at that time when I was going through that phase , I knew something wasn't right , but even my overthinking could not solve that dilemma , I just wanted to satisfy myself with something that was really stupid , I missed out on things , I enclosed myself in that shell, now I feel it was more like an excuse , rather a usual ESCAPE for my mind , "THE DENIAL" Phase .
<p>
But the only good thing is that I have realised it now , I had a friend who used to tell me that I am so negative about things , that I should have a more positive attitutde towards things , towards what I want to achieve and after all this time now I finally realize the meaning of being positive , and its not just about being positive but being confident and putting on your faith into something that you want to achieve , things appear doable and achievable when you do this .     
</p>


<p>
    So now I just put my hope and faith on risk(ðŸ˜“) ..to what I want to achieve, to what I want to do and I think practically now , there are still doubts , that haunt me a lot , the what if's that I do not have answers to , but I am trying , I am trying to become confident , so much that I can answer to all my what if's .

    
    On an ending note , just wanna mention a dialoge from a scene in haikyu(great anime) when karasuno loses to seijoh, and take-chan says "is DEFEAT a proof that you're weak ? isn't it more like a trial , a challenge to overcome ? Of whether you can stand up and walk again after falling to your knees and hands ? If you REMAIN on your knees like that , then it would be a sign of weakness" I really loved this scene , although it was heartbreaking to see them fail but that one failure became the reason that they identified their flaws , worked on them and came back stronger , love this anime .... too much self-motivation for today , so BYE .
 <br><br>
    P.S. Now I need some motivation to fix my sheety sleep schedule..
</p>
   </div>

</div><section id="comments">
    <h2>Comments</h2>
    <ul id="comments-list">
        
    </ul>

    <div id="commentDiv">
        <form id="comment-form" method="POST">
            <textarea name="content" placeholder="Add a comment"></textarea>
            <button type="submit">Submit</button>
        </form>
    </div>
</section>

<%- include("partials/footer.ejs") %>


<script>
  
  document.addEventListener('DOMContentLoaded', async () => {
    console.log("comment doc loaded ");
    const commentsList = document.getElementById('comments-list');
    const commentForm = document.getElementById('comment-form');
    const postId = '<%= post.numerical_id %>';  // Post ID
    const token = localStorage.getItem('token');
    let loading  = false ; 
    let currentUser = null ;
 
    async function fetchLoggedUser(){
        if(!token) {
            return ;
        } 

        try {
            const res = await fetch('/auth/user' , {
                headers : {
                    "Authorization" : `Bearer ${token}`, 
                }
            }) ;
            if(res.ok) {
                const data =  await res.json()  ;
                currentUser = data.user ; 
            }

        }catch(e) {
            console.log(e) ; 
        }

        loadComments();  

    }


      
     async function loadComments () {
        loading = true; 
        commentsList.innerHTML = `<p>Loading comments...</p>`; 

        try {
            const res = await fetch(`/comments/${postId}`) ;
            const {comments} = await res.json() ; 

            loading = false; 
            commentsList.innerHTML = "" ;

             
            comments.forEach((comment) => {
                const li = document.createElement('li') ;
                li.innerHTML = `
                <p> ${comment.content}</p>
                <small>by ${comment.user.name} on ${new Date (comment.createdAt).toDateString()}</small>
                 ${currentUser && currentUser.id === comment.user.id ? `
               <div class = "commentButtonOuter"><button class = "delete-btn" data-id = "${comment.id}" >Delete</button> <button class="edit-btn" data-id ="${comment.id}"> Edit </button> </div>  ` : ""
                 
                 }           
                 `  ; 
             commentsList.appendChild(li) ;

             // event listeners
            document.querySelectorAll('.delete-btn').forEach(button => {
                button.addEventListener("click" , () => deleteComment(button.dataset.id)) ;
            }); 

            document.querySelectorAll('.edit-btn').forEach(button => {
                 button.addEventListener("click" , () => editComment(button.dataset.id) ) ;
            })
                
            })  ;



        } catch(e) {
            console.log('Error loading comments:', e);

        }
         
    }

    // Add comment
    commentForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const confirmation = window.confirm("Sure to post ? ") ;
        if(!confirmation) {
            return ; 
        }
        const content = commentForm.querySelector('textarea[name="content"]').value;

        if (!token) {
            alert('Please log in to comment.');
            return;
        }

          const tempComment = document.createElement("li") ;
           tempComment.innerHTML = `<p>${content}</p>
                                      <small>Posting ....</small>   `;
            commentsList.prepend(tempComment) ;                          
        try {
           const res =  await fetch(`/comments${postId}/comments`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ content })
            });

            if(res.ok) {
                const { comment } = await res.json();

               tempComment.innerHTML = `
                <p>${comment.content}</p>
                <small>by ${comment.user.name} on ${new Date(comment.createdAt).toDateString()}</small>
            `;

            commentForm.reset();
            loadComments() ;
            } else {
                tempComment.innerHTML = `<p>Error adding comment. Please try again.</p>`;
            }
           
        } catch (error) {
            console.error('Error adding comment:', error);
            tempComment.innerHTML = `<p>Error adding comment. Please try after again later.</p>`;
        }
    });


   //  edit comment 

   async function editComment(commentId) {

      if(!token) {
        alert('Please log in to edit comments.');
            return;
      }

      const commentElement = document.querySelector(`[data-id ="${commentId}"]`).closest("li");
      const commentText = commentElement.querySelector("p").innerText;
      const newContent = prompt("Edit your comment:", commentText);


      if (!newContent || newContent.trim() === "") {
        alert("Comment cannot be empty.");
        return;
    }

    try {
        const res = await fetch(`/comments${postId}/${commentId}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ content: newContent })
        });

        if (res.ok) {
            loadComments(); 
        } else {
            alert("Error editing comment. Please try again.");
        }

    } catch (e) {
        console.error("Error editing comment:", e);
    }
}


   
 

    // Delete comment
    async function deleteComment(commentId) {
        if (!token) {
            alert('Please log in to delete comments.');
            return;
        }

        const confirmation = window.confirm("Are you sure you want to delete?");
        if (!confirmation) return;


         const deletionButton = document.querySelector(`.delete-btn[data-id = "${commentId}"]`);

     if (deletionButton) {
            deletionButton.innerText = "Deleting...";
            deletionButton.disabled = true;
        }
        
        try {
            await fetch(`/comments${postId}/${commentId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            loadComments();
        } catch (error) {
            console.error('Error deleting comment:', error);
            commentsList.innerHTML = `<p>Error deleting comment. Please try again.</p>`;
        }
    }
    await fetchLoggedUser(); 
    loadComments();


});
</script>